unit UsuariosController;

interface

procedure RegistryRotas;

implementation

uses horse, System.JSON, System.SysUtils, DataSet.Serialize, UsuariosFunctions, BaseConnetion;

procedure DoListAll(Req: THorseRequest; Res: THorseResponse);
begin
  var LServiceUsuarios := TFormBaseConnetion.Create(nil);
  var LUserFunctions   := TCrudUsuarios.Create(LServiceUsuarios);
  try
    var LSONObject := TJSONObject.Create;
    LSONObject.AddPair('Usuarios', LUserFunctions.ListAll(Req.Query.Dictionary).ToJSONArray());
    LSONObject.AddPair('Records',LUserFunctions.RecordCount);
    Res.Send<TJSONObject>(LSONObject);
  finally
    LUserFunctions.Free;
    LServiceUsuarios.Free;
  end;
end;

procedure DoLisGetById(Req: THorseRequest; Res: THorseResponse);
begin
  var LServiceUsuarios := TFormBaseConnetion.Create(nil);
  var LUserFunctions   := TCrudUsuarios.Create(LServiceUsuarios);
  try
    if LUserFunctions.GetById(Req.Params['id'].ToInt64).IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.NotFound).Error('Usuario não cadastrado');
    Res.Send<TJSONObject>(LServiceUsuarios.QryCadastro.ToJSONObject());

  finally
    LServiceUsuarios.Free;
    LUserFunctions.Free;
  end;   
end;

procedure DoAppend(Req: THorseRequest; Res: THorseResponse);
var
  LNome, Lemail, Lsenha_hash, Lcriado_em, LStatus : string;
begin
  var LServiceUsuarios := TFormBaseConnetion.Create(nil);
  var LUserFunctions   := TCrudUsuarios.Create(LServiceUsuarios);
  try
  
    if not Req.Body<TJSONObject>.TryGetValue<string>('nome',LNome) or LNome.Trim.IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.BadRequest).Error('enter your user');

    if not Req.Body<TJSONObject>.TryGetValue<string>('email',Lemail) or Lemail.Trim.IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.BadRequest).Error('enter your e-mail');

    if not Req.Body<TJSONObject>.TryGetValue<string>('senha_hash',Lsenha_hash) or Lsenha_hash.Trim.IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.BadRequest).Error('enter your password');

    if not Req.Body<TJSONObject>.TryGetValue<string>('Status',LStatus) or LStatus.Trim.IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.BadRequest).Error('enter your Status');

    if not Req.Body<TJSONObject>.TryGetValue<string>('criado_em',Lcriado_em) or Lcriado_em.Trim.IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.BadRequest).Error('enter your date create');

    if LUserFunctions.Append(Req.Body<TJSONObject>) then
      Res.Status(THTTPStatus.Created).Send<TJSONObject>(LServiceUsuarios.QryCadastro.ToJSONObject());
  finally
    LServiceUsuarios.Free;
    LUserFunctions.Free;
  end;

end;

procedure DoUpdate(Req: THorseRequest; Res: THorseResponse);
begin
  var LServiceUsuarios := TFormBaseConnetion.Create(nil);
  var LUserFunctions   := TCrudUsuarios.Create(LServiceUsuarios);
  try
    if LUserFunctions.GetById(Req.Params['id'].ToInt64).IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.NotFound).Error('Usuario não cadastrado');
    if LUserFunctions.Update(req.Body<TJSONObject>) then
      Res.Status(THTTPStatus.NoContent)

  finally
    LServiceUsuarios.Free;
    LUserFunctions.Free;
  end; 
end;

procedure DoDelete(Req: THorseRequest; Res: THorseResponse);
begin
  var LServiceUsuarios := TFormBaseConnetion.Create(nil);
  var LUserFunctions   := TCrudUsuarios.Create(LServiceUsuarios);
  try
    if LUserFunctions.GetById(Req.Params['id'].ToInt64).IsEmpty then
      raise EHorseException.New.Status(THTTPStatus.NotFound).Error('Usuario não cadastrado');
    if LUserFunctions.Delete then
      Res.Status(THTTPStatus.NoContent)

  finally
    LServiceUsuarios.Free;
    LUserFunctions.Free;
  end;
end;

procedure RegistryRotas;
begin
   THorse.Get('/Usuarios',DoListAll);
   THorse.Get('/Usuarios/:Id',DoLisGetById);
   THorse.Post('/Usuarios',DoAppend);
   THorse.Put('/Usuarios/:Id',DoUpdate);
   THorse.Delete('/Usuarios/:Id',DoDelete);
end;

end.
